@{
    ViewData["Title"] = "Réservations";
    var ownerId = (long)ViewData["ownerId"];
}


<div class="d-flex justify-content-between align-items-center">
    <h3 class="pb-1 mb-6">Liste des réservations</h3>
    <div class="d-flex gap-3">
        <button id="btn-calendar" class="btn btn-light" title="Vue Calendrier">
            <i class="bx bxs-calendar"></i>
        </button>
        <button id="btn-table" class="btn btn-light active" title="Vue Tableau">
            <i class="bx bx-table"></i>
        </button>
    </div>
</div>
    
    <div class="alert-container position-fixed top-0 end-0 p-3" style="z-index: 1050;">
        <div id="alertMessage" class="alert d-none" role="alert"></div>
    </div>

<div id="table-view" class="content-section">
   <div class="row justify-content-between align-items-center mb-3">
    <div class="col-md-9 d-flex gap-3">
        <div class="mb-3">
            <label for="statusFilter" class="form-label">Statut</label>
            <select id="statusFilter" class="form-select" aria-label="Filtrer par statut">
                <option value="">Tous</option>
                <option value="PENDING">En attente</option>
                <option value="CONFIRMED">Confirmé</option>
                <option value="CANCELLED">Annulé</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="monthFilter" class="form-label">Mois</label>
            <select id="monthFilter" class="form-select" aria-label="Sélectionner le mois">
                <option value="">Tous les mois</option>
                <option value="1">Janvier</option>
                <option value="2">Février</option>
                <option value="3">Mars</option>
                <option value="4">Avril</option>
                <option value="5">Mai</option>
                <option value="6">Juin</option>
                <option value="7">Juillet</option>
                <option value="8">Août</option>
                <option value="9">Septembre</option>
                <option value="10">Octobre</option>
                <option value="11">Novembre</option>
                <option value="12">Décembre</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="yearFilter" class="form-label">Année</label>
            <select id="yearFilter" class="form-select" aria-label="Sélectionner l'année">
                <option value="">Selectionner une année</option>
            </select>
        </div>
    </div>
    
    <!-- Colonne pour le bouton Export PDF -->
    <div class="col-md-3 d-flex justify-content-end">
        <button class="btn btn-light active" title="Exporter en PDF" id="exportCsv">
            <i class="bx bxs-file-blank"></i> Exporter CSV
        </button>
        <br/>
        <button class="btn btn-light active" title="Exporter en PDF" id="exportPdf">
            <i class="bx bxs-file-pdf"></i> Exporter PDF
        </button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th scope="col">ID</th>
                    <th scope="col">Client</th>
                    <th scope="col">Espace</th>
                    <th scope="col">Reservation Date</th>
                    <th scope="col">Start Date</th>
                    <th scope="col">End Date</th>
                    <th scope="col">Durée</th>
                    <th scope="col">Status</th>
                    <th scope="col">Approbation</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var reservation in Model.Reservations)
                {
                    <tr>
                        <td>@reservation.Id</td>
                        <td>@reservation.EmployeeName</td>
                        <td>@reservation.SpaceName</td>
                        <td>@reservation.ReservationDate.ToString("ddd dd MMM yyyy HH'h'")</td>
                        <td>@reservation.StartDate.ToString("ddd dd MMM yyyy HH'h'")</td>
                        <td>@reservation.EndDate.ToString("ddd dd MMM yyyy HH'h'")</td>
                        <td>
                            @{
                                var duration = reservation.EndDate - reservation.StartDate;
                                var days = duration.Days;
                                var hours = duration.Hours;
                                var durationDisplay = days > 0 ? $"{days}j {hours}h" : $"{hours}h";
                            }
                            @durationDisplay
                        </td>
                        <td>
                            @if (reservation.Status != null)
                            {
                                <span class="badge 
                                    @(reservation.Status.ToString() == "PENDING" ? "bg-warning text-dark" : 
                                      reservation.Status.ToString() == "CONFIRMED" ? "bg-success text-dark" : 
                                      reservation.Status.ToString() == "CANCELLED" ? "bg-danger text-dark" : "bg-secondary")">
                                    @reservation.Status
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Non défini</span>
                            }
                        </td>
                        <td>
                            @if (reservation.Status.ToString() == "PENDING")
                            {
                                <button class="btn btn-success btn-sm text-dark" onclick="approveReservation(@reservation.Id, @reservation.EmployeeId)">Approuver</button><br>
                                <button class="btn btn-danger btn-sm text-dark" onclick="rejectReservation(@reservation.Id, @reservation.EmployeeId)">Refuser</button>
                            }
                            else
                            {
                                <span class="text-muted">Aucune action</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

<div class="row justify-content">
    <div class="col-md-4 d-flex justify-content-end">
        <h5 class="pb-1 mb-6">On trouve (@ViewData["totalReservations"]) resultat(s)</h5>
    </div>
    <div class="col-md-4 d-flex justify-content-end">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (Model.Pagination.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { page = Model.Pagination.CurrentPage - 1, pageSize = Model.Pagination.ItemsPerPage, monthFilter = ViewData["monthFilter"], status = ViewData["statusFilter"], yearFilter = ViewData["yearFilter"] })" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                }

                @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                {
                    <li class="page-item @(Model.Pagination.CurrentPage == i ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = i, pageSize = Model.Pagination.ItemsPerPage, monthFilter = ViewData["monthFilter"], status = ViewData["statusFilter"], yearFilter = ViewData["yearFilter"] })">@i</a>
                    </li>
                }

                @if (Model.Pagination.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", new { page = Model.Pagination.CurrentPage + 1, pageSize = Model.Pagination.ItemsPerPage, monthFilter = ViewData["monthFilter"], status = ViewData["statusFilter"], yearFilter = ViewData["yearFilter"] })" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<div id="calendar-view" class="content-section d-none">
    <!-- Ton calendrier ici -->
   <div id="calendar"></div>
</div>

<!-- Modal pour Approuver -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-labelledby="approveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveModalLabel">Confirmer l'approbation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir approuver cette réservation ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-success" id="confirmApproveButton">Confirmer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal pour Refuser -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectModalLabel">Confirmer le refus</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Êtes-vous sûr de vouloir Annuler cette réservation ?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirmRejectButton">Confirmer</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentReservationId = null;
    let currentEmployeeId = null;
    let currentStatus = null;

    const defaultStatus = "@ViewData["statusFilter"]";
    const defaultMonth = "@ViewData["monthFilter"]";
    const defaultYear = "@ViewData["yearFilter"]";

    // Ouvrir le modal pour approuver
    function approveReservation(reservationId, employeeId) {
        currentReservationId = reservationId;
        currentEmployeeId = employeeId;
        currentStatus = "CONFIRMED";

        const modal = new bootstrap.Modal(document.getElementById('approveModal'));
        modal.show();
    }

    // Ouvrir le modal pour refuser
    function rejectReservation(reservationId, employeeId) {
        currentReservationId = reservationId;
        currentEmployeeId = employeeId;
        currentStatus = "CANCELLED";

        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
    }

    function showAlert(message, type) {
        const alertBox = document.getElementById('alertMessage');
        alertBox.textContent = message;
        alertBox.className = `alert alert-${type} alert-dismissible fade show`;

        // Affiche l'alerte
        alertBox.classList.remove('d-none');

        // Cacher automatiquement après 5 secondes
        setTimeout(() => {
            alertBox.classList.add('d-none');
            alertBox.className = 'alert d-none'; // Réinitialisation de la classe
        }, 5000);
    }

    // Confirmation pour approuver
    document.getElementById('confirmApproveButton').addEventListener('click', function () {
        const modal = bootstrap.Modal.getInstance(document.getElementById('approveModal'));
        modal.hide();
        updateReservationStatus(currentReservationId, currentEmployeeId, currentStatus);
    });

    // Confirmation pour refuser
    document.getElementById('confirmRejectButton').addEventListener('click', function () {
        const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
        modal.hide();
        updateReservationStatus(currentReservationId, currentEmployeeId, currentStatus);
    });

    // Fonction pour mettre à jour le statut de la réservation
    function updateReservationStatus(reservationId, employeeId, status) {
        fetch(`/Reservations/UpdateStatus`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ reservationId, employeeId: employeeId, status: status })
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                showAlert(data.message, 'info'); 
            }
            location.reload(); // Actualiser la liste des réservations
        })
        .catch(error => console.error('Erreur:', error));
    }

    function updateReservations(month, year, status){
        const url = `/Reservations/Index?page=1&pageSize=3&monthFilter=${month}&status=${status}&yearFilter=${year}`;
        window.location.href = url;
    }
    
    document.getElementById('statusFilter').addEventListener('change', function () {
        updateReservations(monthFilter.value, yearFilter.value, statusFilter.value);
    });
    
    document.getElementById('monthFilter').addEventListener('change', function () {
        updateReservations(monthFilter.value, yearFilter.value, statusFilter.value);
    });
    
    document.getElementById('yearFilter').addEventListener('change', function () {
        updateReservations(monthFilter.value, yearFilter.value, statusFilter.value);
    });

    function calculateDuration(startDate, endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        const diffInMillis = end - start;
        const days = Math.floor(diffInMillis / (1000 * 60 * 60 * 24));
        const hours = Math.floor((diffInMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        return `${days}j ${hours}h`;
    }

    // Fonction de formatage de la date
    function formatDate(date) {
        const options = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' };
        const formattedDate = new Date(date).toLocaleString('fr-FR', options);
    
        return formattedDate
            .replace(',', '') // Retirer la virgule
            .replace(' ', ' ') // Espaces déjà adéquats
            .replace('janv.', 'janv.') // Assurez-vous que le mois est correctement formaté
            .replace(':', 'h') // Remplacer les deux-points des minutes par 'h'
            .replace(' ', ''); // Retirer l'espace entre l'heure et la date
    }

    function getMonthYearText(month, year) {
        const months = [
            "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", 
            "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"
        ];
        return `${months[month - 1]} ${year}`;
    }
    
    function getStatusText(status) {
        switch (status) {
            case 0:
                return "PENDING";  // PENDING
            case 1:
                return "CONFIRMED";  // CONFIRMED
            case 2:
                return "CANCELLED";  // CANCELLED
            default:
                return "UNKNOWN";  // Statut inconnu
        }
    }

    document.getElementById("exportPdf").addEventListener("click", async function () {
        try {
            // Appeler l'API avec les filtres en tant que paramètres
            const response = await fetch(`/Reservations/AllReservationToPdf?monthFilter=${defaultMonth}&yearFilter=${defaultYear}&status=${defaultStatus}`);
            const reservations = await response.json();  // L'API renvoie une liste de réservations sous forme de JSON

            // Créer une nouvelle instance de jsPDF
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            doc.setFont('helvetica', 'bold');
            doc.setFontSize(16);
            doc.text('Liste des Réservations', 20, 20);  // Titre principal

            // Afficher le mois et l'année si le mois est supérieur à 0
            if (defaultMonth > 0) {
                const monthYearText = getMonthYearText(defaultMonth, defaultYear);
                doc.setFontSize(12); // Taille plus petite pour le mois et l'année
                doc.text(monthYearText, 20, 35);  // Placer sous le titre
            }

            // Définir les en-têtes de la table
            const tableHeaders = ["ID", "Client", "Espace", "Date de réservation", "Début", "Fin", "Durée", "Statut"];
            const tableData = reservations.map(reservation => [
                reservation.id,
                reservation.employeeName,
                reservation.spaceName,
                formatDate(reservation.reservationDate),
                formatDate(reservation.startDate),
                formatDate(reservation.endDate),
                calculateDuration(reservation.startDate, reservation.endDate),
                getStatusText(reservation.status) 
            ]);

            // Générer la table
            doc.autoTable({
                head: [tableHeaders],
                body: tableData,
                startY: 50,  // Placer la table juste en dessous du mois/année
                theme: 'grid',
                headStyles: { fillColor: [255, 56, 0] },  // Couleur rouge pour les en-têtes
                styles: { font: 'helvetica', fontSize: 10 },
            });

            doc.save('Reservations.pdf');
        } catch (error) {
            console.error("Erreur lors de l'exportation des réservations : ", error);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {

        const btnCalendar = document.getElementById("btn-calendar");
        const btnTable = document.getElementById("btn-table");
        const calendarView = document.getElementById("calendar-view");
        const tableView = document.getElementById("table-view");
        const calendarEl = document.getElementById('calendar');

        const btnExportPdf = document.getElementById('btn-export-pdf');

        // Get the current year
        const currentYear = new Date().getFullYear();
        const dropdown = document.getElementById("yearFilter");
        
        for (let i = currentYear; i >= currentYear - 7; i--) {
            const option = document.createElement("option");  // Create an <option> element
            option.value = i;  // Set the value of the option
            option.textContent = i;  // Set the text displayed in the dropdown
            dropdown.appendChild(option);  // Append the <option> to the dropdown
        }

        document.getElementById("statusFilter").value = defaultStatus || ""; // Si null, fallback sur ""
        document.getElementById("monthFilter").value = defaultMonth || "";
        document.getElementById("yearFilter").value = defaultYear || "";

        // Par défaut, le tableau est actif
        btnTable.classList.add("active");
        tableView.classList.remove("d-none");
        calendarView.classList.add("d-none");

        // Gérer le clic sur le bouton Calendrier
        btnCalendar.addEventListener("click", function () {
            btnTable.classList.remove("active");
            btnCalendar.classList.add("active");
            tableView.classList.add("d-none");
            calendarView.classList.remove("d-none");
        });

        // Gérer le clic sur le bouton Tableau
        btnTable.addEventListener("click", function () {
            btnCalendar.classList.remove("active");
            btnTable.classList.add("active");
            calendarView.classList.add("d-none");
            tableView.classList.remove("d-none");
        });

        btnExportPdf.addEventListener('click', function () {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            doc.text('Hello world!', 10, 10);
            doc.save('example.pdf');
        });

        const yearSelect = document.getElementById('yearFilter');
        for (let year = currentYear; year >= currentYear - 5; year--) {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            yearSelect.appendChild(option);
        }

    });

</script>
