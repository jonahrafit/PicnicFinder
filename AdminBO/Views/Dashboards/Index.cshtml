@inject IHttpContextAccessor httpContextAccessor
@using System.Security.Claims

@{
    var name = httpContextAccessor.HttpContext.User.Identity.Name;
    var userRole = httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Role)?.Value;
    Console.WriteLine(userRole);
}
@{
  ViewData["Title"] = "Tableau de bord - Analytique";
}
@section VendorStyles {
  <link rel="stylesheet" href="~/vendor/libs/apex-charts/apex-charts.css" />
}
@section VendorScripts {
  <script src="~/vendor/libs/apex-charts/apexcharts.js"></script>
}
@section PageScripts {
  <script>
    'use strict';

    (function () {
      const cardColor = config.colors.cardColor;
      const headingColor = config.colors.headingColor;
      const legendColor = config.colors.bodyColor;
      const labelColor = config.colors.textMuted;
      const borderColor = config.colors.borderColor;

      document.addEventListener('DOMContentLoaded', () => {
        // Get the current year
        const currentYear = new Date().getFullYear();
        // Get the year of the previous year
        const previousYear = currentYear - 1;

        // Get the dropdown element
        const dropdown = document.getElementById("year-dropdown");
        const yearButton = document.getElementById("year-button");

        // Loop through the previous 3 years
        for (let i = previousYear; i >= previousYear - 5; i--) {
          const li = document.createElement("li");
            const a = document.createElement("a");
            a.classList.add("dropdown-item");
            a.href = "javascript:void(0);";
            a.dataset.year = i;  // Set the year as a data attribute
            a.textContent = i;  // Set the text to the year
            li.appendChild(a);  // Append the <a> to the <li>
            dropdown.appendChild(li);  // Append the <li> to the dropdown
        }
        
        const dropdownItems = document.querySelectorAll('.dropdown-item');
        dropdownItems.forEach(item => {
          item.addEventListener('click', (event) => {
            event.preventDefault();

            // Récupérer l'année sélectionnée
            const year = item.getAttribute('data-year');
            console.log(`Année sélectionnée : ${year || 'Aucune'}`);

            yearButton.textContent = `${year || 'Aucune'}`;
            // Appeler la fonction avec l'année sélectionnée
            getReservationsData(year);
          });
        });

        // Appeler avec un état initial vide
        getReservationsData(null); 
        
			  async function fetchReservations(month, year) {
          // Remplacez par l'URL réelle de votre API
          const response = await fetch(`http://localhost:5055/api/reservation/${month}/${year}`);
          const data = await response.json();
          return data.map((reservation) => {
            const date = new Date(reservation.startDate);
            const year = date.getUTCFullYear();
            const month = String(date.getUTCMonth() + 1).padStart(2, "0");
            const day = String(date.getUTCDate()).padStart(2, "0");
            return `${year}-${month}-${day}`;
          });
        }

        async function initializeCalendar() {
          // Définit le mois et l'année actuels comme valeurs par défaut
          const today = new Date();
          const currentMonth = today.getMonth() + 1; // Mois courant (base 1)
          const currentYear = today.getFullYear();

          // Appel à fetchReservations pour récupérer les données
          const highlightedDates = await fetchReservations(currentMonth, currentYear);

          // Initialisation de Flatpickr avec les dates surlignées et alerte de changement de mois
          const flatpickrInstance = document.getElementById("datetimepicker-dashboard").flatpickr({
            inline: true,
            prevArrow: "<span title=\"Previous month\">&laquo;</span>",
            nextArrow: "<span title=\"Next month\">&raquo;</span>",

            onDayCreate: (dObj, dStr, fp, dayElem) => {
              const date = dayElem.dateObj;
              const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;

              if (highlightedDates.includes(formattedDate)) {
                dayElem.classList.add("highlighted");
              }
            },
            onMonthChange: (selectedDates, dateStr, instance) => {
              // Afficher une alerte lorsque le mois/année change
              const selectedMonth = instance.currentMonth + 1; // Mois sélectionné (base 1)
              const selectedYear = instance.currentYear;

              // Recharger les réservations pour le mois sélectionné
              fetchReservations(selectedMonth, selectedYear).then((newHighlightedDates) => {
                instance.redraw();
                instance.config.onDayCreate = (dObj, dStr, fp, dayElem) => {
                  const date = dayElem.dateObj;
                  const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;

                  if (newHighlightedDates.includes(formattedDate)) {
                    dayElem.classList.add("highlighted");
                  }
                };
              });
            }
          });
        }

        initializeCalendar();
      });

      const getReservationsData = async (year) => {
        try {
          const yearParam = year ? `?year=${year}` : ''; // Construire la query string
          const response = await fetch(`/Reservations/GetReservationsData${yearParam}`);

          if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
          }

          const data = await response.json();
          console.log('Données reçues:', data);

          // Transformation des données
          const months = data.map(item => item.monthYear);
          const pendingData = data.map(item => item.pendingReservations);
          const confirmedData = data.map(item => item.confirmedReservations);
          const cancelledData = data.map(item => item.cancelledReservations);

          if(yearParam != '') {
            const response2 = await fetch(`/Reservations/GetReservationGrowth${yearParam}`);

            if (!response2.ok) {
              throw new Error(`Erreur HTTP: ${response2.status}`);
            }

            const data2 = await response2.json();
            console.log('Données reçues:', data2);

             // Vérifier que la croissance est un nombre valide
            if (!isNaN(data2)) {
                // Afficher le texte de croissance avec le nombre
                const growthTextElement = document.getElementById('growth_data_text');
                const growthNumberElement = document.getElementById('growth_data_number');
                
                growthNumberElement.innerText = data2.toFixed(2);
                // growthTextElement.classList.remove('d-none');
            } else {
                console.error('Croissance invalide reçue');
            }
            renderGrowthChart(data2);
          }

          renderReservationLineChart(months, pendingData, confirmedData, cancelledData);
        } catch (error) {
          console.error("Erreur lors de la récupération des données :", error.message);
        }
      };

      const renderGrowthChart = (growdata) => {
        const growthChartEl = document.querySelector('#growthChart'),
          growthChartOptions = {
            series: [growdata],
            labels: ['Croissance'],
            chart: {
              height: 240,
              type: 'radialBar'
            },
            plotOptions: {
              radialBar: {
                size: 150,
                offsetY: 10,
                startAngle: -150,
                endAngle: 150,
                hollow: {
                  size: '55%'
                },
                track: {
                  background: cardColor,
                  strokeWidth: '100%'
                },
                dataLabels: {
                  name: {
                    offsetY: 15,
                    color: legendColor,
                    fontSize: '15px',
                    fontWeight: '500',
                    fontFamily: 'Public Sans'
                  },
                  value: {
                    offsetY: -25,
                    color: headingColor,
                    fontSize: '22px',
                    fontWeight: '500',
                    fontFamily: 'Public Sans'
                  }
                }
              }
            },
            colors: [config.colors.primary],
            fill: {
              type: 'gradient',
              gradient: {
                shade: 'dark',
                shadeIntensity: 0.5,
                gradientToColors: [config.colors.primary],
                inverseColors: true,
                opacityFrom: 1,
                opacityTo: 0.6,
                stops: [30, 70, 100]
              }
            },
            stroke: {
              dashArray: 5
            },
            grid: {
              padding: {
                top: -35,
                bottom: -10
              }
            },
            states: {
              hover: {
                filter: {
                  type: 'none'
                }
              },
              active: {
                filter: {
                  type: 'none'
                }
              }
            }
        };

        if (typeof growthChartEl !== undefined && growthChartEl !== null) {
          const growthChart = new ApexCharts(growthChartEl, growthChartOptions);
          growthChart.render();
        }
      };

      const renderReservationLineChart = (months, pendingData,confirmedData, cancelledData) => {
        const totalRevenueChartEl = document.querySelector('#totalRevenueChart');
        if (!totalRevenueChartEl) {
          console.warn("Élément graphique '#totalRevenueChart' introuvable.");
          return;
        }
        const totalRevenueChartOptions = {
          series: [
            { name: "Confirmées", data: confirmedData },
            { name: "En attente", data: pendingData },
            { name: "Annulées", data: cancelledData }
          ],
          chart: {
            height: 317,
            type: 'line', // Passer à 'line' pour un graphique linéaire
            toolbar: { show: false }
          },
          stroke: {
            curve: 'smooth', // Courbe lissée pour la ligne
            width: 3, // Largeur de la ligne
            lineCap: 'round', // Arrondi aux bords
            colors: [config.colors.primary, config.colors.info, config.colors.danger] // Couleur des lignes
          },
          colors: [config.colors.primary, config.colors.info, config.colors.danger], // Couleur des lignes
          dataLabels: { enabled: false },
          legend: {
            show: true,
            horizontalAlign: 'left',
            position: 'top',
            markers: { height: 8, width: 8, radius: 12, offsetX: -5 },
            fontSize: '13px',
            labels: { colors: legendColor }
          },
          grid: {
            strokeDashArray: 7,
            borderColor: borderColor,
            padding: { top: 0, bottom: -8, left: 20, right: 20 }
          },
          xaxis: {
            categories: months, // Mois ou autres catégories
            labels: { style: { fontSize: '13px', colors: labelColor } }
          },
          yaxis: {
            labels: { 
              style: { fontSize: '13px', colors: labelColor },
              formatter: function(value) {
                // Formater l'axe des ordonnées pour afficher des entiers uniquement
                return Math.round(value); // Arrondi à l'entier le plus proche
              }
             }
          },
          markers: {
            size: 5, // Taille des marqueurs (points sur les lignes)
            colors: [config.colors.primary, config.colors.info, config.colors.danger], // Couleur des points
            strokeColor: 'white', // Couleur du bord des points
            strokeWidth: 2
          }
        };

        // Supprimer l'ancien graphique s'il existe
        if (totalRevenueChartEl._chartInstance) {
          totalRevenueChartEl._chartInstance.destroy();
        }

        const totalRevenueChart = new ApexCharts(totalRevenueChartEl, totalRevenueChartOptions);
        totalRevenueChartEl._chartInstance = totalRevenueChart;
        totalRevenueChart.render();
      };

    })();
  </script>
}

<style>
  /* Style pour les jours surlignés */
  .highlighted {
    background-color: #ffde59 !important;
    color: #000 !important;
    border-radius: 50%;
  }
</style>

<div class="row">
  <!-- En-tête du Tableau de bord -->
  <div class="col-xxl-8 mb-6">
    <div class="card mb-6">
      <div class="d-flex align-items-start row">
        <div class="col-sm-7">
          <div class="card-body">
            <h5 class="card-title text-primary mb-3">Bonjour ! 🎉</h5>
            <p class="mb-6">Vous avez connu une belle activité aujourd'hui.<br> Consultez votre profil pour voir vos dernières réalisations.</p>
            <!-- <a href="javascript:;" class="btn btn-sm btn-outline-primary">Voir les Badges</a> -->
          </div>
        </div>
        <div class="col-sm-5 text-center text-sm-left">
          <div class="card-body pb-0 px-0 px-md-6">
            <img src="~/img/illustrations/man-with-laptop.png" height="175" alt="Voir Badge Utilisateur">
          </div>
        </div>
      </div>
    </div>
    @if (httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
    {   
      @if (userRole == "OWNER")
      {
        <div class="card">
          <div class="row row-bordered g-0">
            <div class="col-lg-8">
              <div class="card-header d-flex align-items-center justify-content-between">
                <h5 class="m-0 me-2">Nombre des réservations</h5>
                <div class="dropdown">
                  <button class="btn p-0" type="button" id="totalRevenue" data-bs-toggle="dropdown">
                    <i class="bx bx-dots-vertical-rounded bx-lg text-muted"></i>
                  </button>
                  <div class="dropdown-menu dropdown-menu-end">
                    <a class="dropdown-item" href="javascript:void(0);">Actualiser</a>
                    <a class="dropdown-item" href="javascript:void(0);">Partager</a>
                  </div>
                </div>
              </div>
              <div id="totalRevenueChart" class="px-3"></div>
            </div>
            <div class="col-lg-4 d-flex align-items-center">
              <div class="card-body px-xl-9">
                <div class="text-center mb-6">
                  <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" id="year-button">
                      <script>document.write(new Date().getFullYear())</script>
                    </button>
                    <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                      <span class="visually-hidden">Activer le menu déroulant</span>
                    </button>
                    <ul id="year-dropdown" class="dropdown-menu">
                      <li><a class="dropdown-item" href="javascript:void(0);" data-year="">Sélectionnez une année</a></li>
                    </ul>
                  </div>
                </div>
                <div id="growthChart"></div>
                <div class="text-center fw-medium my-6" id="growth_data_text"><span id="growth_data_number"></span>% de Croissance en terme de <b> réservation Confirmés </b> par rapport à l'année précedente</div>
              </div>
            </div>
          </div>
        </div>
      }  
    }
  </div>

  <div class="col-xxl-4 col-lg-12">
    <div class="row">
			<div class="col-12  d-flex order-1 order-xxl-1">
				<div class="card flex-fill">
					<div class="card-header">
						<h5 class="card-title mb-0">Calendar</h5>
					</div>
					<div class="card-body d-flex">
							<div class="chart">
								<div id="datetimepicker-dashboard"></div>
							</div>
					</div>
          <div class="card-footer">
						<h5 class="card-title mb-0">Réservation</h5>
					</div>
				</div>
			</div>
    </div>
  </div>
</div>
